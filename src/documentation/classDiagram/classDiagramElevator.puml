@startuml
entity "Controller"{
id: int

action()
doorOpeningRestriction()
findNearestCabin()
addSequence()
removeSequence()
private mergeSequence()
}

enum DoorState{
OPENED
CLOSED
}

entity Cabin{
id: int
}

entity SequenceOfStops {
id: int
stopFloors: int[]
currentFloor: int
}

Direction "direction" --o SequenceOfStops


enum EngineState{
GOING_UP
GOING_DOWN
STAYING
}

enum Direction{
UPWARDS
DOWNWARDS
}

enum ButtonState{
PRESSED
UNPRESSED
}

entity "CabinButton"{
cabinId: int
buttonValue: int

press(): void
isPressed(): bool
}


abstract "FloorButton"{
  press(): void
  isPressed(): bool
}

entity "Up FloorButton" {
  id: int
}

entity "Down FloorButton" {
 id: int
}

"Up FloorButton" --|> "FloorButton"
"Down FloorButton" --|> "FloorButton"

abstract Floor{
  id: int
  visit(): void
}

interface FloorWithUpButton {
  pressUpButton(): void
}

"Up FloorButton" "upButton" --o FloorWithUpButton

interface FloorWithDownButton {
 pressDownButton(): void
}

"Down FloorButton" "downButton" --o FloorWithDownButton

entity FirstFloor {
  id: int
}

FirstFloor --|> Floor
FirstFloor ..|> FloorWithUpButton

entity LastFloor {
  id: int
}

LastFloor --|> Floor
LastFloor ..|> FloorWithDownButton

entity MiddleFloor {
  id: int
}

MiddleFloor --|> Floor
MiddleFloor ..|> FloorWithUpButton
MiddleFloor ..|> FloorWithDownButton

Direction "direction" --o "FloorButton"

Cabin "1" o-- "N cabinButtons" "CabinButton"
ButtonState "isPressed " --o "FloorButton"
ButtonState "isPressed " --o "CabinButton"

entity Engine {
  id: int
}

Engine o-- "engineState" EngineState

entity Shaft {
  cabinPosition: int
}

Shaft "1" o-- "1 engine" Engine

entity House {
  id: int
}

Shaft "1" o-- "N floors" Floor
House "1" o-- "N shafts" Shaft

Controller "1 controller" --o "1" House
Shaft "1" o-- "1 cabin" Cabin

Cabin o-- "doorState" DoorState

SequenceOfStops "0..N SequenceOfStops" --o "1" Shaft

interface Command {
    execute()
}

class MoveCabinCommand {
}
class OpenDoorCommand {
}
class CloseDoorCommand {
}
class DisplayCurrentPositionCommand{
}
class StopCabinCommand {
    private checkOverweight(): boolean
    private displayOverweight(): void
}

enum OverweightState {
    OVERWEIGHTED
    NOT_OVERWEIGHTED
}

OverweightState "isOverweighted" --o Cabin

MoveCabinCommand  ..|> Command
OpenDoorCommand  ..|> Command
CloseDoorCommand  ..|> Command
DisplayCurrentPositionCommand  ..|> Command
StopCabinCommand  ..|> Command

CabinButton o--> Command
FloorButton o--> Command

SequenceOfStops o-- "command" Command

@enduml
